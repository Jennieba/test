
Oppg6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000740  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>
#include <avr/delay.h>

int main(void)
{
	DDRD |= (1<<3);	//HUSK å sette PortD Pin3 som output! ellers får man blink med liiite lys
  80:	53 9a       	sbi	0x0a, 3	; 10
	while(1)	//setter (1) for å indikere true/alltid
	{
		PORTD |= (1<<3);		//setter PortD, Pin3 som HIGH, ved å bruke en "OR" |, da vil D alltid være høy uansett hvilken port som assignes.
		_delay_ms(350);		//setter en delay på 350ms
		
		PORTD ^= (1<<3);		//setter PortD til LOW, ved på bruke en AND/OR (^)
  82:	98 e0       	ldi	r25, 0x08	; 8
{
	DDRD |= (1<<3);	//HUSK å sette PortD Pin3 som output! ellers får man blink med liiite lys
	
	while(1)	//setter (1) for å indikere true/alltid
	{
		PORTD |= (1<<3);		//setter PortD, Pin3 som HIGH, ved å bruke en "OR" |, da vil D alltid være høy uansett hvilken port som assignes.
  84:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e6       	ldi	r18, 0x6F	; 111
  88:	31 e1       	ldi	r19, 0x11	; 17
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
		_delay_ms(350);		//setter en delay på 350ms
		
		PORTD ^= (1<<3);		//setter PortD til LOW, ved på bruke en AND/OR (^)
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	89 27       	eor	r24, r25
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	2f e3       	ldi	r18, 0x3F	; 63
  a0:	3d e0       	ldi	r19, 0x0D	; 13
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x4>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
