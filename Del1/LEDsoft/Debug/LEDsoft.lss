
LEDsoft.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084b  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000738  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8Delay_msi>:
#include <avr/interrupt.h>
#include <avr/delay.h>

void Delay_ms(int n)	//lager en funksjon "Delay_ms" som kan brukes sammen med variabler 
{
	while (n--)		//true frem til n=0
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	41 f0       	breq	.+16     	; 0x94 <_Z8Delay_msi+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	e9 ef       	ldi	r30, 0xF9	; 249
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <_Z8Delay_msi+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_Z8Delay_msi+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	c1 f7       	brne	.-16     	; 0x84 <_Z8Delay_msi+0x4>
  94:	08 95       	ret

00000096 <main>:
//denne funksjonen vil kalles så mange ganger som variabelen tilsier. Dvs om "time_on" er 5ms, så kalles funksjonen 5 ganger


int main(void)
{
DDRD |= (1<<3);				//setter output til PortD Pin3
  96:	53 9a       	sbi	0x0a, 3	; 10
		i < RampSteps;		//i<100
		i++;			
		
		for(int i=0; i<RampSteps; i++)	//loop som starter med i=0, går til i<100 og adder èn per runde (i++)
		{
			int time_on = (i*PwmPeriod) / RampSteps; //samme som: map(i, 0, RampSteps, 0 PwmPeriod);	
  98:	0f 2e       	mov	r0, r31
  9a:	f4 e6       	ldi	r31, 0x64	; 100
  9c:	ef 2e       	mov	r14, r31
  9e:	f1 2c       	mov	r15, r1
  a0:	f0 2d       	mov	r31, r0
			//time_off:	10-((i*10)/100   går til   10-((100*10))/100= 0ms 
			//dvs: "time_on" går fra 0-10ms mens "time_off" går fra 10-0ms
			
			PORTD |= (1<<3);		//setter D3 til HØY
			Delay_ms(time_on);								//kaller funksjonen "Delay_ms" og bruker variabelen "time_on" til å definere antall ganger funksjonens loop kjører
			PORTD ^= (1<<3);		//setter D3 til LOW
  a2:	68 94       	set
  a4:	bb 24       	eor	r11, r11
  a6:	b3 f8       	bld	r11, 3
			Delay_ms(time_off);
  a8:	0a e0       	ldi	r16, 0x0A	; 10
  aa:	10 e0       	ldi	r17, 0x00	; 0
}
//denne funksjonen vil kalles så mange ganger som variabelen tilsier. Dvs om "time_on" er 5ms, så kalles funksjonen 5 ganger


int main(void)
{
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
		i < RampSteps;		//i<100
		i++;			
		
		for(int i=0; i<RampSteps; i++)	//loop som starter med i=0, går til i<100 og adder èn per runde (i++)
		{
			int time_on = (i*PwmPeriod) / RampSteps; //samme som: map(i, 0, RampSteps, 0 PwmPeriod);	
  b0:	ce 01       	movw	r24, r28
  b2:	b7 01       	movw	r22, r14
  b4:	0e 94 87 00 	call	0x10e	; 0x10e <__divmodhi4>
  b8:	6b 01       	movw	r12, r22
			int time_off = PwmPeriod-time_on;
			//time_on:	(i*10)/100   resulterer i at "time_on" vil bli større for hver runde frem til   max (100*10)/100= 10 ms
			//time_off:	10-((i*10)/100   går til   10-((100*10))/100= 0ms 
			//dvs: "time_on" går fra 0-10ms mens "time_off" går fra 10-0ms
			
			PORTD |= (1<<3);		//setter D3 til HØY
  ba:	5b 9a       	sbi	0x0b, 3	; 11
			Delay_ms(time_on);								//kaller funksjonen "Delay_ms" og bruker variabelen "time_on" til å definere antall ganger funksjonens loop kjører
  bc:	cb 01       	movw	r24, r22
  be:	0e 94 40 00 	call	0x80	; 0x80 <_Z8Delay_msi>
			PORTD ^= (1<<3);		//setter D3 til LOW
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8b 25       	eor	r24, r11
  c6:	8b b9       	out	0x0b, r24	; 11
			Delay_ms(time_off);
  c8:	c8 01       	movw	r24, r16
  ca:	8c 19       	sub	r24, r12
  cc:	9d 09       	sbc	r25, r13
  ce:	0e 94 40 00 	call	0x80	; 0x80 <_Z8Delay_msi>
  d2:	2a 96       	adiw	r28, 0x0a	; 10
	{
		int i = 0;
		i < RampSteps;		//i<100
		i++;			
		
		for(int i=0; i<RampSteps; i++)	//loop som starter med i=0, går til i<100 og adder èn per runde (i++)
  d4:	c8 3e       	cpi	r28, 0xE8	; 232
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	d8 07       	cpc	r29, r24
  da:	51 f7       	brne	.-44     	; 0xb0 <main+0x1a>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
			Delay_ms(time_off);
		}
		
		for(int i=0; i<RampSteps; i++)
		{
			int time_off = (i*PwmPeriod) / RampSteps;	
  e0:	ce 01       	movw	r24, r28
  e2:	b7 01       	movw	r22, r14
  e4:	0e 94 87 00 	call	0x10e	; 0x10e <__divmodhi4>
  e8:	6b 01       	movw	r12, r22
			int time_on = PwmPeriod-time_off;
			//samme greia bare motsatt, her går "time_on" fra 10-0ms mens "time_off" går fra 0-10ms
			
			PORTD |= (1<<3);
  ea:	5b 9a       	sbi	0x0b, 3	; 11
			Delay_ms(time_on);
  ec:	c8 01       	movw	r24, r16
  ee:	86 1b       	sub	r24, r22
  f0:	97 0b       	sbc	r25, r23
  f2:	0e 94 40 00 	call	0x80	; 0x80 <_Z8Delay_msi>
			PORTD ^= (1<<3);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8b 25       	eor	r24, r11
  fa:	8b b9       	out	0x0b, r24	; 11
			Delay_ms(time_off);
  fc:	c6 01       	movw	r24, r12
  fe:	0e 94 40 00 	call	0x80	; 0x80 <_Z8Delay_msi>
 102:	2a 96       	adiw	r28, 0x0a	; 10
			Delay_ms(time_on);								//kaller funksjonen "Delay_ms" og bruker variabelen "time_on" til å definere antall ganger funksjonens loop kjører
			PORTD ^= (1<<3);		//setter D3 til LOW
			Delay_ms(time_off);
		}
		
		for(int i=0; i<RampSteps; i++)
 104:	c8 3e       	cpi	r28, 0xE8	; 232
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	d8 07       	cpc	r29, r24
 10a:	51 f7       	brne	.-44     	; 0xe0 <main+0x4a>
 10c:	cf cf       	rjmp	.-98     	; 0xac <main+0x16>

0000010e <__divmodhi4>:
 10e:	97 fb       	bst	r25, 7
 110:	07 2e       	mov	r0, r23
 112:	16 f4       	brtc	.+4      	; 0x118 <__divmodhi4+0xa>
 114:	00 94       	com	r0
 116:	07 d0       	rcall	.+14     	; 0x126 <__divmodhi4_neg1>
 118:	77 fd       	sbrc	r23, 7
 11a:	09 d0       	rcall	.+18     	; 0x12e <__divmodhi4_neg2>
 11c:	0e 94 9b 00 	call	0x136	; 0x136 <__udivmodhi4>
 120:	07 fc       	sbrc	r0, 7
 122:	05 d0       	rcall	.+10     	; 0x12e <__divmodhi4_neg2>
 124:	3e f4       	brtc	.+14     	; 0x134 <__divmodhi4_exit>

00000126 <__divmodhi4_neg1>:
 126:	90 95       	com	r25
 128:	81 95       	neg	r24
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	08 95       	ret

0000012e <__divmodhi4_neg2>:
 12e:	70 95       	com	r23
 130:	61 95       	neg	r22
 132:	7f 4f       	sbci	r23, 0xFF	; 255

00000134 <__divmodhi4_exit>:
 134:	08 95       	ret

00000136 <__udivmodhi4>:
 136:	aa 1b       	sub	r26, r26
 138:	bb 1b       	sub	r27, r27
 13a:	51 e1       	ldi	r21, 0x11	; 17
 13c:	07 c0       	rjmp	.+14     	; 0x14c <__udivmodhi4_ep>

0000013e <__udivmodhi4_loop>:
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	a6 17       	cp	r26, r22
 144:	b7 07       	cpc	r27, r23
 146:	10 f0       	brcs	.+4      	; 0x14c <__udivmodhi4_ep>
 148:	a6 1b       	sub	r26, r22
 14a:	b7 0b       	sbc	r27, r23

0000014c <__udivmodhi4_ep>:
 14c:	88 1f       	adc	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	5a 95       	dec	r21
 152:	a9 f7       	brne	.-22     	; 0x13e <__udivmodhi4_loop>
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
